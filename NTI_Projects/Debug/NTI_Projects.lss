
NTI_Projects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  000011d4  00001268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080010a  0080010a  00001312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032cb  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001079  00000000  00000000  00004a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cbd  00000000  00000000  00005b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c60  00000000  00000000  000077d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000119c  00000000  00000000  00008434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002986  00000000  00000000  000095d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000bf56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_1>
       8:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__vector_2>
       c:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <__vector_6>
      1c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_7>
      20:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__vector_8>
      24:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__vector_9>
      28:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_10>
      2c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_11>
      30:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__vector_12>
      34:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_15>
      40:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 33       	cpi	r26, 0x30	; 48
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 05 	call	0xa06	; 0xa06 <main>
      8a:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SecDia_Init>:
u32 rot=0;


void SecDia_Init(void)
{
	DIO_Init();
      92:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_Init>
	LCD_Init();
      96:	0e 94 70 04 	call	0x8e0	; 0x8e0 <LCD_Init>
	UART_Init();
      9a:	0e 94 86 08 	call	0x110c	; 0x110c <UART_Init>
	TIMER0_Init(TIMER0_NORMAL_MODE);
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	0e 94 65 07 	call	0xeca	; 0xeca <TIMER0_Init>
	TIMER0_Start(TIMER0_SCALER_8);
      a4:	82 e0       	ldi	r24, 0x02	; 2
      a6:	0e 94 89 07 	call	0xf12	; 0xf12 <TIMER0_Start>
      aa:	08 95       	ret

000000ac <led_on>:

}

void led_on(void)
{
	DIO_WritePin(PINA6,HIGH);
      ac:	61 e0       	ldi	r22, 0x01	; 1
      ae:	86 e0       	ldi	r24, 0x06	; 6
      b0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
      b4:	08 95       	ret

000000b6 <UART_Receive_SidSec>:
}

u32 UART_Receive_SidSec(void)
{
      b6:	cf 92       	push	r12
      b8:	df 92       	push	r13
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	1f 93       	push	r17
      c0:	cf 93       	push	r28
      c2:	df 93       	push	r29
	u32 num;
	
	u8 n1,n2,n3,n4;
	n1=UART_Receive();
      c4:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n1-='0';
      c8:	10 ed       	ldi	r17, 0xD0	; 208
      ca:	18 0f       	add	r17, r24
	n2=UART_Receive();
      cc:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n2-='0';
      d0:	d0 ed       	ldi	r29, 0xD0	; 208
      d2:	d8 0f       	add	r29, r24
	n3=UART_Receive();
      d4:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n3-='0';
      d8:	c0 ed       	ldi	r28, 0xD0	; 208
      da:	c8 0f       	add	r28, r24
	n4=UART_Receive();
      dc:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n4-='0';
      e0:	80 53       	subi	r24, 0x30	; 48
	
	num=((u32)n1<<28)|((u32)n2<<24)|((u32)n3<<20)|((u32)n4<<16);
      e2:	c1 2e       	mov	r12, r17
      e4:	d1 2c       	mov	r13, r1
      e6:	e1 2c       	mov	r14, r1
      e8:	f1 2c       	mov	r15, r1
      ea:	0b 2e       	mov	r0, r27
      ec:	bc e1       	ldi	r27, 0x1C	; 28
      ee:	cc 0c       	add	r12, r12
      f0:	dd 1c       	adc	r13, r13
      f2:	ee 1c       	adc	r14, r14
      f4:	ff 1c       	adc	r15, r15
      f6:	ba 95       	dec	r27
      f8:	d1 f7       	brne	.-12     	; 0xee <UART_Receive_SidSec+0x38>
      fa:	b0 2d       	mov	r27, r0
      fc:	4d 2f       	mov	r20, r29
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	60 e0       	ldi	r22, 0x00	; 0
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	74 2f       	mov	r23, r20
     106:	66 27       	eor	r22, r22
     108:	55 27       	eor	r21, r21
     10a:	44 27       	eor	r20, r20
     10c:	c4 2a       	or	r12, r20
     10e:	d5 2a       	or	r13, r21
     110:	e6 2a       	or	r14, r22
     112:	f7 2a       	or	r15, r23
     114:	4c 2f       	mov	r20, r28
     116:	50 e0       	ldi	r21, 0x00	; 0
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	03 2e       	mov	r0, r19
     11e:	34 e1       	ldi	r19, 0x14	; 20
     120:	44 0f       	add	r20, r20
     122:	55 1f       	adc	r21, r21
     124:	66 1f       	adc	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	3a 95       	dec	r19
     12a:	d1 f7       	brne	.-12     	; 0x120 <UART_Receive_SidSec+0x6a>
     12c:	30 2d       	mov	r19, r0
     12e:	c4 2a       	or	r12, r20
     130:	d5 2a       	or	r13, r21
     132:	e6 2a       	or	r14, r22
     134:	f7 2a       	or	r15, r23
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	dc 01       	movw	r26, r24
     13e:	99 27       	eor	r25, r25
     140:	88 27       	eor	r24, r24
     142:	c8 2a       	or	r12, r24
     144:	d9 2a       	or	r13, r25
     146:	ea 2a       	or	r14, r26
     148:	fb 2a       	or	r15, r27
	n1=UART_Receive();
     14a:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n1=UART_Receive();
     14e:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	return num;
	
}
     152:	c7 01       	movw	r24, r14
     154:	b6 01       	movw	r22, r12
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	1f 91       	pop	r17
     15c:	ff 90       	pop	r15
     15e:	ef 90       	pop	r14
     160:	df 90       	pop	r13
     162:	cf 90       	pop	r12
     164:	08 95       	ret

00000166 <UART_Receive_enc>:
	return num;
	
}

u32 UART_Receive_enc(void)
{
     166:	cf 92       	push	r12
     168:	df 92       	push	r13
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	cf 93       	push	r28
	u32 num=0;
	
	u8 n1=0;
	for(u8 i=0;i<8;i++)
     170:	c0 e0       	ldi	r28, 0x00	; 0
	
}

u32 UART_Receive_enc(void)
{
	u32 num=0;
     172:	c1 2c       	mov	r12, r1
     174:	d1 2c       	mov	r13, r1
     176:	76 01       	movw	r14, r12
	
	u8 n1=0;
	for(u8 i=0;i<8;i++)
     178:	1b c0       	rjmp	.+54     	; 0x1b0 <UART_Receive_enc+0x4a>
	{
		n1=UART_Receive();
     17a:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
		if (n1<='9'&&n1>='0')
     17e:	90 ed       	ldi	r25, 0xD0	; 208
     180:	98 0f       	add	r25, r24
     182:	9a 30       	cpi	r25, 0x0A	; 10
     184:	10 f0       	brcs	.+4      	; 0x18a <UART_Receive_enc+0x24>
		n1-='0';
		else
		n1=n1-'A'+10;
     186:	99 ec       	ldi	r25, 0xC9	; 201
     188:	98 0f       	add	r25, r24
		
		n1&=0x0f;
     18a:	9f 70       	andi	r25, 0x0F	; 15
		num=(num<<4)|n1;
     18c:	cc 0c       	add	r12, r12
     18e:	dd 1c       	adc	r13, r13
     190:	ee 1c       	adc	r14, r14
     192:	ff 1c       	adc	r15, r15
     194:	cc 0c       	add	r12, r12
     196:	dd 1c       	adc	r13, r13
     198:	ee 1c       	adc	r14, r14
     19a:	ff 1c       	adc	r15, r15
     19c:	cc 0c       	add	r12, r12
     19e:	dd 1c       	adc	r13, r13
     1a0:	ee 1c       	adc	r14, r14
     1a2:	ff 1c       	adc	r15, r15
     1a4:	cc 0c       	add	r12, r12
     1a6:	dd 1c       	adc	r13, r13
     1a8:	ee 1c       	adc	r14, r14
     1aa:	ff 1c       	adc	r15, r15
     1ac:	c9 2a       	or	r12, r25
u32 UART_Receive_enc(void)
{
	u32 num=0;
	
	u8 n1=0;
	for(u8 i=0;i<8;i++)
     1ae:	cf 5f       	subi	r28, 0xFF	; 255
     1b0:	c8 30       	cpi	r28, 0x08	; 8
     1b2:	18 f3       	brcs	.-58     	; 0x17a <UART_Receive_enc+0x14>
		
		n1&=0x0f;
		num=(num<<4)|n1;
	}
	
	n1=UART_Receive();
     1b4:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n1=UART_Receive();
     1b8:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	return num;
}
     1bc:	c7 01       	movw	r24, r14
     1be:	b6 01       	movw	r22, r12
     1c0:	cf 91       	pop	r28
     1c2:	ff 90       	pop	r15
     1c4:	ef 90       	pop	r14
     1c6:	df 90       	pop	r13
     1c8:	cf 90       	pop	r12
     1ca:	08 95       	ret

000001cc <UART_Receive_SidEnc>:
	
}


u32 UART_Receive_SidEnc(void)
{
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
	u32 num;
	u8 n1,n2,n3,n4;
	n1=UART_Receive();
     1d4:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n1-='0';
     1d8:	00 ed       	ldi	r16, 0xD0	; 208
     1da:	08 0f       	add	r16, r24
	n2=UART_Receive();
     1dc:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n2-='0';
     1e0:	10 ed       	ldi	r17, 0xD0	; 208
     1e2:	18 0f       	add	r17, r24
	n3=UART_Receive();
     1e4:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n3-='0';
     1e8:	d0 ed       	ldi	r29, 0xD0	; 208
     1ea:	d8 0f       	add	r29, r24
	n4=UART_Receive();
     1ec:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n4-='0';
     1f0:	c0 ed       	ldi	r28, 0xD0	; 208
     1f2:	c8 0f       	add	r28, r24
	enc=UART_Receive_enc();
     1f4:	0e 94 b3 00 	call	0x166	; 0x166 <UART_Receive_enc>
     1f8:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <enc>
     1fc:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <enc+0x1>
     200:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <enc+0x2>
     204:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <enc+0x3>
	
	num=((u32)n1<<28)|((u32)n2<<24)|((u32)n3<<20)|((u32)n4<<16);
     208:	40 2f       	mov	r20, r16
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	03 2e       	mov	r0, r19
     212:	3c e1       	ldi	r19, 0x1C	; 28
     214:	44 0f       	add	r20, r20
     216:	55 1f       	adc	r21, r21
     218:	66 1f       	adc	r22, r22
     21a:	77 1f       	adc	r23, r23
     21c:	3a 95       	dec	r19
     21e:	d1 f7       	brne	.-12     	; 0x214 <UART_Receive_SidEnc+0x48>
     220:	30 2d       	mov	r19, r0
     222:	81 2f       	mov	r24, r17
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	a0 e0       	ldi	r26, 0x00	; 0
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	b8 2f       	mov	r27, r24
     22c:	aa 27       	eor	r26, r26
     22e:	99 27       	eor	r25, r25
     230:	88 27       	eor	r24, r24
     232:	48 2b       	or	r20, r24
     234:	59 2b       	or	r21, r25
     236:	6a 2b       	or	r22, r26
     238:	7b 2b       	or	r23, r27
     23a:	8d 2f       	mov	r24, r29
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	07 2e       	mov	r0, r23
     244:	74 e1       	ldi	r23, 0x14	; 20
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	aa 1f       	adc	r26, r26
     24c:	bb 1f       	adc	r27, r27
     24e:	7a 95       	dec	r23
     250:	d1 f7       	brne	.-12     	; 0x246 <UART_Receive_SidEnc+0x7a>
     252:	70 2d       	mov	r23, r0
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	8c 2f       	mov	r24, r28
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	dc 01       	movw	r26, r24
     266:	99 27       	eor	r25, r25
     268:	88 27       	eor	r24, r24
	num&=0xffff0000;
     26a:	8a 01       	movw	r16, r20
     26c:	9b 01       	movw	r18, r22
     26e:	08 2b       	or	r16, r24
     270:	19 2b       	or	r17, r25
     272:	2a 2b       	or	r18, r26
     274:	3b 2b       	or	r19, r27
     276:	c9 01       	movw	r24, r18
     278:	b8 01       	movw	r22, r16
	
	
	
	return num;
	
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	08 95       	ret

00000284 <UART_Receive_rot>:
	return num;
}


u32 UART_Receive_rot(void)
{
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	cf 93       	push	r28
	u32 num=0;
	
	u8 n1=0;
	for(u8 i=0;i<4;i++)
     28e:	c0 e0       	ldi	r28, 0x00	; 0
}


u32 UART_Receive_rot(void)
{
	u32 num=0;
     290:	c1 2c       	mov	r12, r1
     292:	d1 2c       	mov	r13, r1
     294:	76 01       	movw	r14, r12
	
	u8 n1=0;
	for(u8 i=0;i<4;i++)
     296:	1b c0       	rjmp	.+54     	; 0x2ce <UART_Receive_rot+0x4a>
	{
		n1=UART_Receive();
     298:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
		if (n1<='9'&&n1>='0')
     29c:	90 ed       	ldi	r25, 0xD0	; 208
     29e:	98 0f       	add	r25, r24
     2a0:	9a 30       	cpi	r25, 0x0A	; 10
     2a2:	10 f0       	brcs	.+4      	; 0x2a8 <UART_Receive_rot+0x24>
		n1-='0';
		else
		n1=n1-'A'+10;
     2a4:	99 ec       	ldi	r25, 0xC9	; 201
     2a6:	98 0f       	add	r25, r24
		
		n1&=0x0f;
     2a8:	9f 70       	andi	r25, 0x0F	; 15
		num=(num<<4)|n1;
     2aa:	cc 0c       	add	r12, r12
     2ac:	dd 1c       	adc	r13, r13
     2ae:	ee 1c       	adc	r14, r14
     2b0:	ff 1c       	adc	r15, r15
     2b2:	cc 0c       	add	r12, r12
     2b4:	dd 1c       	adc	r13, r13
     2b6:	ee 1c       	adc	r14, r14
     2b8:	ff 1c       	adc	r15, r15
     2ba:	cc 0c       	add	r12, r12
     2bc:	dd 1c       	adc	r13, r13
     2be:	ee 1c       	adc	r14, r14
     2c0:	ff 1c       	adc	r15, r15
     2c2:	cc 0c       	add	r12, r12
     2c4:	dd 1c       	adc	r13, r13
     2c6:	ee 1c       	adc	r14, r14
     2c8:	ff 1c       	adc	r15, r15
     2ca:	c9 2a       	or	r12, r25
u32 UART_Receive_rot(void)
{
	u32 num=0;
	
	u8 n1=0;
	for(u8 i=0;i<4;i++)
     2cc:	cf 5f       	subi	r28, 0xFF	; 255
     2ce:	c4 30       	cpi	r28, 0x04	; 4
     2d0:	18 f3       	brcs	.-58     	; 0x298 <UART_Receive_rot+0x14>
		n1=n1-'A'+10;
		
		n1&=0x0f;
		num=(num<<4)|n1;
	}
	n1=UART_Receive();
     2d2:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n1=UART_Receive();
     2d6:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	return num;
}
     2da:	c7 01       	movw	r24, r14
     2dc:	b6 01       	movw	r22, r12
     2de:	cf 91       	pop	r28
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	df 90       	pop	r13
     2e6:	cf 90       	pop	r12
     2e8:	08 95       	ret

000002ea <UART_Receive_SidRot>:
	return num;
	
}

u32 UART_Receive_SidRot(void)
{
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
	u32 num;
	rot=0;
     2f2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
     2f6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
     2fa:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end+0x2>
     2fe:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x3>
	u8 n1,n2,n3,n4;
	n1=UART_Receive();
     302:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n1-='0';
     306:	00 ed       	ldi	r16, 0xD0	; 208
     308:	08 0f       	add	r16, r24
	n2=UART_Receive();
     30a:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n2-='0';
     30e:	10 ed       	ldi	r17, 0xD0	; 208
     310:	18 0f       	add	r17, r24
	n3=UART_Receive();
     312:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n3-='0';
     316:	d0 ed       	ldi	r29, 0xD0	; 208
     318:	d8 0f       	add	r29, r24
	n4=UART_Receive();
     31a:	0e 94 92 08 	call	0x1124	; 0x1124 <UART_Receive>
	n4-='0';
     31e:	c0 ed       	ldi	r28, 0xD0	; 208
     320:	c8 0f       	add	r28, r24
	rot=UART_Receive_rot();
     322:	0e 94 42 01 	call	0x284	; 0x284 <UART_Receive_rot>
     326:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
     32a:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
     32e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
     332:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
	
	num=((u32)n1<<28)|((u32)n2<<24)|((u32)n3<<20)|((u32)n4<<16);
     336:	40 2f       	mov	r20, r16
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	03 2e       	mov	r0, r19
     340:	3c e1       	ldi	r19, 0x1C	; 28
     342:	44 0f       	add	r20, r20
     344:	55 1f       	adc	r21, r21
     346:	66 1f       	adc	r22, r22
     348:	77 1f       	adc	r23, r23
     34a:	3a 95       	dec	r19
     34c:	d1 f7       	brne	.-12     	; 0x342 <UART_Receive_SidRot+0x58>
     34e:	30 2d       	mov	r19, r0
     350:	81 2f       	mov	r24, r17
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	a0 e0       	ldi	r26, 0x00	; 0
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	b8 2f       	mov	r27, r24
     35a:	aa 27       	eor	r26, r26
     35c:	99 27       	eor	r25, r25
     35e:	88 27       	eor	r24, r24
     360:	48 2b       	or	r20, r24
     362:	59 2b       	or	r21, r25
     364:	6a 2b       	or	r22, r26
     366:	7b 2b       	or	r23, r27
     368:	8d 2f       	mov	r24, r29
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	a0 e0       	ldi	r26, 0x00	; 0
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	07 2e       	mov	r0, r23
     372:	74 e1       	ldi	r23, 0x14	; 20
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	aa 1f       	adc	r26, r26
     37a:	bb 1f       	adc	r27, r27
     37c:	7a 95       	dec	r23
     37e:	d1 f7       	brne	.-12     	; 0x374 <UART_Receive_SidRot+0x8a>
     380:	70 2d       	mov	r23, r0
     382:	48 2b       	or	r20, r24
     384:	59 2b       	or	r21, r25
     386:	6a 2b       	or	r22, r26
     388:	7b 2b       	or	r23, r27
     38a:	8c 2f       	mov	r24, r28
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	a0 e0       	ldi	r26, 0x00	; 0
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	dc 01       	movw	r26, r24
     394:	99 27       	eor	r25, r25
     396:	88 27       	eor	r24, r24
     398:	8a 01       	movw	r16, r20
     39a:	9b 01       	movw	r18, r22
     39c:	08 2b       	or	r16, r24
     39e:	19 2b       	or	r17, r25
     3a0:	2a 2b       	or	r18, r26
     3a2:	3b 2b       	or	r19, r27
     3a4:	c9 01       	movw	r24, r18
     3a6:	b8 01       	movw	r22, r16
	
	
	return num;
	
}
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <random_num>:
	n1=UART_Receive();
	return num;
}

u32 random_num(void)
{
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
	u32 num;
	u8 n1,n2,n3,n4;
	n1=TCNT0;
     3b6:	42 b7       	in	r20, 0x32	; 50
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	20 ea       	ldi	r18, 0xA0	; 160
     3ba:	2a 95       	dec	r18
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <random_num+0x8>
	_delay_us(30);
	n2=TCNT0;
     3be:	92 b7       	in	r25, 0x32	; 50
     3c0:	80 ea       	ldi	r24, 0xA0	; 160
     3c2:	8a 95       	dec	r24
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <random_num+0x10>
	_delay_us(30);
	n3=TCNT0;
     3c6:	82 b7       	in	r24, 0x32	; 50
     3c8:	20 ea       	ldi	r18, 0xA0	; 160
     3ca:	2a 95       	dec	r18
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <random_num+0x18>
	_delay_us(30);
	n4=TCNT0;
     3ce:	e2 b7       	in	r30, 0x32	; 50
	num=((u32)n1<<24)|((u32)n2<<16)|((u32)n3<<8)|(n4);
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	34 2f       	mov	r19, r20
     3d8:	22 27       	eor	r18, r18
     3da:	11 27       	eor	r17, r17
     3dc:	00 27       	eor	r16, r16
     3de:	49 2f       	mov	r20, r25
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	ba 01       	movw	r22, r20
     3e8:	55 27       	eor	r21, r21
     3ea:	44 27       	eor	r20, r20
     3ec:	40 2b       	or	r20, r16
     3ee:	51 2b       	or	r21, r17
     3f0:	62 2b       	or	r22, r18
     3f2:	73 2b       	or	r23, r19
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	ba 2f       	mov	r27, r26
     3fc:	a9 2f       	mov	r26, r25
     3fe:	98 2f       	mov	r25, r24
     400:	88 27       	eor	r24, r24
     402:	84 2b       	or	r24, r20
     404:	95 2b       	or	r25, r21
     406:	a6 2b       	or	r26, r22
     408:	b7 2b       	or	r27, r23
     40a:	bc 01       	movw	r22, r24
     40c:	cd 01       	movw	r24, r26
     40e:	6e 2b       	or	r22, r30
	return num;
}
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	08 95       	ret

00000416 <dec_num>:

u32 dec_num(void)
{
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	00 d0       	rcall	.+0      	; 0x41c <dec_num+0x6>
     41c:	00 d0       	rcall	.+0      	; 0x41e <dec_num+0x8>
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
	u32 num=0;
     422:	19 82       	std	Y+1, r1	; 0x01
     424:	1a 82       	std	Y+2, r1	; 0x02
     426:	1b 82       	std	Y+3, r1	; 0x03
     428:	1c 82       	std	Y+4, r1	; 0x04
	u8 *p1=(u8*)&rand;
	u8 *p2=(u8*)&num;
	for (u8 i=0;i<4;i++)
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	10 c0       	rjmp	.+32     	; 0x44e <dec_num+0x38>
	{
		p2[i]=p1[i]^5;
     42e:	82 2f       	mov	r24, r18
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	e1 e0       	ldi	r30, 0x01	; 1
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	ec 0f       	add	r30, r28
     438:	fd 1f       	adc	r31, r29
     43a:	e8 0f       	add	r30, r24
     43c:	f9 1f       	adc	r31, r25
     43e:	dc 01       	movw	r26, r24
     440:	ae 5e       	subi	r26, 0xEE	; 238
     442:	be 4f       	sbci	r27, 0xFE	; 254
     444:	9c 91       	ld	r25, X
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	89 27       	eor	r24, r25
     44a:	80 83       	st	Z, r24
u32 dec_num(void)
{
	u32 num=0;
	u8 *p1=(u8*)&rand;
	u8 *p2=(u8*)&num;
	for (u8 i=0;i<4;i++)
     44c:	2f 5f       	subi	r18, 0xFF	; 255
     44e:	24 30       	cpi	r18, 0x04	; 4
     450:	70 f3       	brcs	.-36     	; 0x42e <dec_num+0x18>
	{
		p2[i]=p1[i]^5;
	}
	return num;
     452:	69 81       	ldd	r22, Y+1	; 0x01
     454:	7a 81       	ldd	r23, Y+2	; 0x02
     456:	8b 81       	ldd	r24, Y+3	; 0x03
     458:	9c 81       	ldd	r25, Y+4	; 0x04
}
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <SecDia_Runnable>:
	TIMER0_Start(TIMER0_SCALER_8);
}


void SecDia_Runnable(void)
{
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	2c 97       	sbiw	r28, 0x0c	; 12
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
	u8 *p=(u8*)&rand;

	u32 sid_sec=0;
     488:	19 82       	std	Y+1, r1	; 0x01
     48a:	1a 82       	std	Y+2, r1	; 0x02
     48c:	1b 82       	std	Y+3, r1	; 0x03
     48e:	1c 82       	std	Y+4, r1	; 0x04

	u32 sid_enc=0;
     490:	1d 82       	std	Y+5, r1	; 0x05
     492:	1e 82       	std	Y+6, r1	; 0x06
     494:	1f 82       	std	Y+7, r1	; 0x07
     496:	18 86       	std	Y+8, r1	; 0x08

	u32 sid_rot=0;
     498:	19 86       	std	Y+9, r1	; 0x09
     49a:	1a 86       	std	Y+10, r1	; 0x0a
     49c:	1b 86       	std	Y+11, r1	; 0x0b
     49e:	1c 86       	std	Y+12, r1	; 0x0c

	u32 decrypt_num=0;

	u8 flag_security=0;

	LCD_Clear();
     4a0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Clear>
	LCD_WriteString("secure diagnostics");
     4a4:	80 e7       	ldi	r24, 0x70	; 112
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
	flag_security=0;

	sid_sec=0;
     4ac:	19 82       	std	Y+1, r1	; 0x01
     4ae:	1a 82       	std	Y+2, r1	; 0x02
     4b0:	1b 82       	std	Y+3, r1	; 0x03
     4b2:	1c 82       	std	Y+4, r1	; 0x04

	sid_enc=0;
     4b4:	1d 82       	std	Y+5, r1	; 0x05
     4b6:	1e 82       	std	Y+6, r1	; 0x06
     4b8:	1f 82       	std	Y+7, r1	; 0x07
     4ba:	18 86       	std	Y+8, r1	; 0x08

	sid_rot=0;
     4bc:	19 86       	std	Y+9, r1	; 0x09
     4be:	1a 86       	std	Y+10, r1	; 0x0a
     4c0:	1b 86       	std	Y+11, r1	; 0x0b
     4c2:	1c 86       	std	Y+12, r1	; 0x0c

	enc=0;
     4c4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <enc>
     4c8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <enc+0x1>
     4cc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <enc+0x2>
     4d0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <enc+0x3>

	rot=0;
     4d4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
     4d8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
     4dc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end+0x2>
     4e0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x3>

	if(flag_security==0)
	{
		
		
		sid_sec=UART_Receive_SidSec();
     4e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_Receive_SidSec>
     4e8:	69 83       	std	Y+1, r22	; 0x01
     4ea:	7a 83       	std	Y+2, r23	; 0x02
     4ec:	8b 83       	std	Y+3, r24	; 0x03
     4ee:	9c 83       	std	Y+4, r25	; 0x04

		if (sid_sec==0x27010000&&!flag_security)
     4f0:	61 15       	cp	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	81 40       	sbci	r24, 0x01	; 1
     4f6:	97 42       	sbci	r25, 0x27	; 39
     4f8:	51 f5       	brne	.+84     	; 0x54e <SecDia_Runnable+0xe6>
		{
			LCD_Clear();
     4fa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Clear>
			LCD_WriteString("67 01    ");
     4fe:	83 e8       	ldi	r24, 0x83	; 131
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			rand=random_num();
     506:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <random_num>
     50a:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <rand>
     50e:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <rand+0x1>
     512:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <rand+0x2>
     516:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <rand+0x3>
			
			for (u8 i=3;i!=255;i--)
     51a:	13 e0       	ldi	r17, 0x03	; 3
     51c:	08 c0       	rjmp	.+16     	; 0x52e <SecDia_Runnable+0xc6>
			{
				LCD_WriteHex(p[i]);
     51e:	e1 2f       	mov	r30, r17
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	ee 5e       	subi	r30, 0xEE	; 238
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	80 81       	ld	r24, Z
     528:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_WriteHex>
		{
			LCD_Clear();
			LCD_WriteString("67 01    ");
			rand=random_num();
			
			for (u8 i=3;i!=255;i--)
     52c:	11 50       	subi	r17, 0x01	; 1
     52e:	1f 3f       	cpi	r17, 0xFF	; 255
     530:	b1 f7       	brne	.-20     	; 0x51e <SecDia_Runnable+0xb6>
			{
				LCD_WriteHex(p[i]);
			}
			
			LCD_GoTo(3,0);
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	83 e0       	ldi	r24, 0x03	; 3
     536:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_GoTo>
			LCD_WriteString("Access Done");
     53a:	8d e8       	ldi	r24, 0x8D	; 141
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			
			decrypt_num=dec_num();
     542:	0e 94 0b 02 	call	0x416	; 0x416 <dec_num>
     546:	6b 01       	movw	r12, r22
     548:	7c 01       	movw	r14, r24
			flag_security=1;
     54a:	11 e0       	ldi	r17, 0x01	; 1
     54c:	2f c0       	rjmp	.+94     	; 0x5ac <SecDia_Runnable+0x144>
		}
		else
		{
			LCD_Clear();
     54e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Clear>
			LCD_WriteString("NRC 7F ");
     552:	89 e9       	ldi	r24, 0x99	; 153
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			sid_sec>>=16;
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	9a 81       	ldd	r25, Y+2	; 0x02
     55e:	ab 81       	ldd	r26, Y+3	; 0x03
     560:	bc 81       	ldd	r27, Y+4	; 0x04
     562:	cd 01       	movw	r24, r26
     564:	aa 27       	eor	r26, r26
     566:	bb 27       	eor	r27, r27
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	9a 83       	std	Y+2, r25	; 0x02
     56c:	ab 83       	std	Y+3, r26	; 0x03
     56e:	bc 83       	std	Y+4, r27	; 0x04
			p=(u8*) &sid_sec;
			for (u8 i=1;i!=255;i--)
     570:	11 e0       	ldi	r17, 0x01	; 1
     572:	0a c0       	rjmp	.+20     	; 0x588 <SecDia_Runnable+0x120>
			{
				LCD_WriteHex(p[i]);
     574:	e1 e0       	ldi	r30, 0x01	; 1
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	ec 0f       	add	r30, r28
     57a:	fd 1f       	adc	r31, r29
     57c:	e1 0f       	add	r30, r17
     57e:	f1 1d       	adc	r31, r1
     580:	80 81       	ld	r24, Z
     582:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_WriteHex>
		{
			LCD_Clear();
			LCD_WriteString("NRC 7F ");
			sid_sec>>=16;
			p=(u8*) &sid_sec;
			for (u8 i=1;i!=255;i--)
     586:	11 50       	subi	r17, 0x01	; 1
     588:	1f 3f       	cpi	r17, 0xFF	; 255
     58a:	a1 f7       	brne	.-24     	; 0x574 <SecDia_Runnable+0x10c>
			{
				LCD_WriteHex(p[i]);
			}
			LCD_WriteString(" 35");
     58c:	81 ea       	ldi	r24, 0xA1	; 161
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			LCD_GoTo(3,0);
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_GoTo>
			LCD_WriteString("Access Denied");
     59c:	85 ea       	ldi	r24, 0xA5	; 165
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>

	u8 flag_security=0;

	LCD_Clear();
	LCD_WriteString("secure diagnostics");
	flag_security=0;
     5a4:	10 e0       	ldi	r17, 0x00	; 0

	enc=0;

	rot=0;

	decrypt_num=0;
     5a6:	c1 2c       	mov	r12, r1
     5a8:	d1 2c       	mov	r13, r1
     5aa:	76 01       	movw	r14, r12
			LCD_WriteString(" 35");
			LCD_GoTo(3,0);
			LCD_WriteString("Access Denied");
		}
	}
	if(flag_security==1)
     5ac:	11 30       	cpi	r17, 0x01	; 1
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <SecDia_Runnable+0x14a>
     5b0:	55 c0       	rjmp	.+170    	; 0x65c <SecDia_Runnable+0x1f4>
	{
		sid_enc=UART_Receive_SidEnc();
     5b2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <UART_Receive_SidEnc>
     5b6:	6d 83       	std	Y+5, r22	; 0x05
     5b8:	7e 83       	std	Y+6, r23	; 0x06
     5ba:	8f 83       	std	Y+7, r24	; 0x07
     5bc:	98 87       	std	Y+8, r25	; 0x08
		if ((sid_enc==0x27020000)&&(enc==decrypt_num)&&(flag_security==1))
     5be:	61 15       	cp	r22, r1
     5c0:	71 05       	cpc	r23, r1
     5c2:	82 40       	sbci	r24, 0x02	; 2
     5c4:	97 42       	sbci	r25, 0x27	; 39
     5c6:	f9 f4       	brne	.+62     	; 0x606 <SecDia_Runnable+0x19e>
     5c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <enc>
     5cc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <enc+0x1>
     5d0:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <enc+0x2>
     5d4:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <enc+0x3>
     5d8:	c8 16       	cp	r12, r24
     5da:	d9 06       	cpc	r13, r25
     5dc:	ea 06       	cpc	r14, r26
     5de:	fb 06       	cpc	r15, r27
     5e0:	91 f4       	brne	.+36     	; 0x606 <SecDia_Runnable+0x19e>
     5e2:	11 30       	cpi	r17, 0x01	; 1
     5e4:	81 f4       	brne	.+32     	; 0x606 <SecDia_Runnable+0x19e>
		{
			LCD_Clear();
     5e6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Clear>
			LCD_WriteString("67 02 ");
     5ea:	83 eb       	ldi	r24, 0xB3	; 179
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			LCD_GoTo(3,0);
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_GoTo>
			LCD_WriteString("Access Done");
     5fa:	8d e8       	ldi	r24, 0x8D	; 141
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			flag_security=2;
     602:	12 e0       	ldi	r17, 0x02	; 2
     604:	2b c0       	rjmp	.+86     	; 0x65c <SecDia_Runnable+0x1f4>
		}
		else
		{
			LCD_Clear();
     606:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Clear>
			LCD_WriteString("NRC 7F ");
     60a:	89 e9       	ldi	r24, 0x99	; 153
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			sid_sec>>=16;
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	ab 81       	ldd	r26, Y+3	; 0x03
     618:	bc 81       	ldd	r27, Y+4	; 0x04
     61a:	cd 01       	movw	r24, r26
     61c:	aa 27       	eor	r26, r26
     61e:	bb 27       	eor	r27, r27
     620:	89 83       	std	Y+1, r24	; 0x01
     622:	9a 83       	std	Y+2, r25	; 0x02
     624:	ab 83       	std	Y+3, r26	; 0x03
     626:	bc 83       	std	Y+4, r27	; 0x04
			p=(u8*)&sid_enc;
			for (u8 i=1;i!=255;i--)
     628:	01 e0       	ldi	r16, 0x01	; 1
     62a:	0a c0       	rjmp	.+20     	; 0x640 <SecDia_Runnable+0x1d8>
			{
				LCD_WriteHex(p[i]);
     62c:	e5 e0       	ldi	r30, 0x05	; 5
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	ec 0f       	add	r30, r28
     632:	fd 1f       	adc	r31, r29
     634:	e0 0f       	add	r30, r16
     636:	f1 1d       	adc	r31, r1
     638:	80 81       	ld	r24, Z
     63a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_WriteHex>
		{
			LCD_Clear();
			LCD_WriteString("NRC 7F ");
			sid_sec>>=16;
			p=(u8*)&sid_enc;
			for (u8 i=1;i!=255;i--)
     63e:	01 50       	subi	r16, 0x01	; 1
     640:	0f 3f       	cpi	r16, 0xFF	; 255
     642:	a1 f7       	brne	.-24     	; 0x62c <SecDia_Runnable+0x1c4>
			{
				LCD_WriteHex(p[i]);
			}
			LCD_WriteString(" 35");
     644:	81 ea       	ldi	r24, 0xA1	; 161
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			LCD_GoTo(3,0);
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_GoTo>
			LCD_WriteString("Access Denied");
     654:	85 ea       	ldi	r24, 0xA5	; 165
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
		}
	}
	if(flag_security==2)
     65c:	12 30       	cpi	r17, 0x02	; 2
     65e:	09 f0       	breq	.+2      	; 0x662 <SecDia_Runnable+0x1fa>
     660:	67 c0       	rjmp	.+206    	; 0x730 <SecDia_Runnable+0x2c8>
	{
		
		
		sid_rot=UART_Receive_SidRot();
     662:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_Receive_SidRot>
     666:	69 87       	std	Y+9, r22	; 0x09
     668:	7a 87       	std	Y+10, r23	; 0x0a
     66a:	8b 87       	std	Y+11, r24	; 0x0b
     66c:	9c 87       	std	Y+12, r25	; 0x0c
		if ((sid_rot==0x31010000)&&(rot==0xaa00)&&flag_security==2)
     66e:	61 15       	cp	r22, r1
     670:	71 05       	cpc	r23, r1
     672:	81 40       	sbci	r24, 0x01	; 1
     674:	91 43       	sbci	r25, 0x31	; 49
     676:	89 f5       	brne	.+98     	; 0x6da <SecDia_Runnable+0x272>
     678:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     67c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     680:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
     684:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
     688:	81 15       	cp	r24, r1
     68a:	9a 4a       	sbci	r25, 0xAA	; 170
     68c:	a1 05       	cpc	r26, r1
     68e:	b1 05       	cpc	r27, r1
     690:	21 f5       	brne	.+72     	; 0x6da <SecDia_Runnable+0x272>
     692:	12 30       	cpi	r17, 0x02	; 2
     694:	11 f5       	brne	.+68     	; 0x6da <SecDia_Runnable+0x272>
		{
			led_on();
     696:	0e 94 56 00 	call	0xac	; 0xac <led_on>
			LCD_Clear();
     69a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Clear>
			LCD_WriteString("7701 ");
     69e:	8a eb       	ldi	r24, 0xBA	; 186
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			LCD_GoTo(3,0);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_GoTo>
			LCD_WriteString("Task Done");
     6ae:	80 ec       	ldi	r24, 0xC0	; 192
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			LCD_GoTo(4,0);
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	84 e0       	ldi	r24, 0x04	; 4
     6ba:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_GoTo>
			LCD_WriteString("led is turned on");
     6be:	8a ec       	ldi	r24, 0xCA	; 202
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c6:	8f ef       	ldi	r24, 0xFF	; 255
     6c8:	9d e3       	ldi	r25, 0x3D	; 61
     6ca:	29 e4       	ldi	r18, 0x49	; 73
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	90 40       	sbci	r25, 0x00	; 0
     6d0:	20 40       	sbci	r18, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <SecDia_Runnable+0x264>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <SecDia_Runnable+0x26e>
     6d6:	00 00       	nop
     6d8:	2b c0       	rjmp	.+86     	; 0x730 <SecDia_Runnable+0x2c8>
			_delay_ms(1500);
		}
		else
		{
			LCD_Clear();
     6da:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Clear>
			LCD_WriteString("NRC 7F ");
     6de:	89 e9       	ldi	r24, 0x99	; 153
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			sid_sec>>=16;
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	ab 81       	ldd	r26, Y+3	; 0x03
     6ec:	bc 81       	ldd	r27, Y+4	; 0x04
     6ee:	cd 01       	movw	r24, r26
     6f0:	aa 27       	eor	r26, r26
     6f2:	bb 27       	eor	r27, r27
     6f4:	89 83       	std	Y+1, r24	; 0x01
     6f6:	9a 83       	std	Y+2, r25	; 0x02
     6f8:	ab 83       	std	Y+3, r26	; 0x03
     6fa:	bc 83       	std	Y+4, r27	; 0x04
			p=(u8*)&sid_rot;
			for (u8 i=1;i!=255;i--)
     6fc:	11 e0       	ldi	r17, 0x01	; 1
     6fe:	0a c0       	rjmp	.+20     	; 0x714 <SecDia_Runnable+0x2ac>
			{
				LCD_WriteHex(p[i]);
     700:	e9 e0       	ldi	r30, 0x09	; 9
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	ec 0f       	add	r30, r28
     706:	fd 1f       	adc	r31, r29
     708:	e1 0f       	add	r30, r17
     70a:	f1 1d       	adc	r31, r1
     70c:	80 81       	ld	r24, Z
     70e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_WriteHex>
		{
			LCD_Clear();
			LCD_WriteString("NRC 7F ");
			sid_sec>>=16;
			p=(u8*)&sid_rot;
			for (u8 i=1;i!=255;i--)
     712:	11 50       	subi	r17, 0x01	; 1
     714:	1f 3f       	cpi	r17, 0xFF	; 255
     716:	a1 f7       	brne	.-24     	; 0x700 <SecDia_Runnable+0x298>
			{
				LCD_WriteHex(p[i]);
			}
			LCD_WriteString(" 35");
     718:	81 ea       	ldi	r24, 0xA1	; 161
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
			LCD_GoTo(3,0);
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_GoTo>
			LCD_WriteString("Task Undefined");
     728:	8b ed       	ldi	r24, 0xDB	; 219
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 ae 04 	call	0x95c	; 0x95c <LCD_WriteString>
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	9d e3       	ldi	r25, 0x3D	; 61
     734:	29 e4       	ldi	r18, 0x49	; 73
     736:	81 50       	subi	r24, 0x01	; 1
     738:	90 40       	sbci	r25, 0x00	; 0
     73a:	20 40       	sbci	r18, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <SecDia_Runnable+0x2ce>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <SecDia_Runnable+0x2d8>
     740:	00 00       	nop
		}
	}
	
			_delay_ms(1500); // to display the diagnostics before the second task

}
     742:	2c 96       	adiw	r28, 0x0c	; 12
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	08 95       	ret

00000760 <WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		WriteData(character[i]);
	}
	WriteIns(0x80);
}
     760:	cf 93       	push	r28
     762:	c8 2f       	mov	r28, r24
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     76c:	6c 2f       	mov	r22, r28
     76e:	66 1f       	adc	r22, r22
     770:	66 27       	eor	r22, r22
     772:	66 1f       	adc	r22, r22
     774:	8c e0       	ldi	r24, 0x0C	; 12
     776:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     77a:	c6 fb       	bst	r28, 6
     77c:	66 27       	eor	r22, r22
     77e:	60 f9       	bld	r22, 0
     780:	8a e0       	ldi	r24, 0x0A	; 10
     782:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     786:	c5 fb       	bst	r28, 5
     788:	66 27       	eor	r22, r22
     78a:	60 f9       	bld	r22, 0
     78c:	89 e0       	ldi	r24, 0x09	; 9
     78e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     792:	c4 fb       	bst	r28, 4
     794:	66 27       	eor	r22, r22
     796:	60 f9       	bld	r22, 0
     798:	88 e0       	ldi	r24, 0x08	; 8
     79a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     7a6:	8f e9       	ldi	r24, 0x9F	; 159
     7a8:	9f e0       	ldi	r25, 0x0F	; 15
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <WriteIns+0x4a>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <WriteIns+0x50>
     7b0:	00 00       	nop
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     7ba:	8f e9       	ldi	r24, 0x9F	; 159
     7bc:	9f e0       	ldi	r25, 0x0F	; 15
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <WriteIns+0x5e>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <WriteIns+0x64>
     7c4:	00 00       	nop
     7c6:	c3 fb       	bst	r28, 3
     7c8:	66 27       	eor	r22, r22
     7ca:	60 f9       	bld	r22, 0
     7cc:	8c e0       	ldi	r24, 0x0C	; 12
     7ce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     7d2:	c2 fb       	bst	r28, 2
     7d4:	66 27       	eor	r22, r22
     7d6:	60 f9       	bld	r22, 0
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     7de:	c1 fb       	bst	r28, 1
     7e0:	66 27       	eor	r22, r22
     7e2:	60 f9       	bld	r22, 0
     7e4:	89 e0       	ldi	r24, 0x09	; 9
     7e6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     7ea:	6c 2f       	mov	r22, r28
     7ec:	61 70       	andi	r22, 0x01	; 1
     7ee:	88 e0       	ldi	r24, 0x08	; 8
     7f0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	82 e0       	ldi	r24, 0x02	; 2
     7f8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     7fc:	8f e9       	ldi	r24, 0x9F	; 159
     7fe:	9f e0       	ldi	r25, 0x0F	; 15
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <__DATA_REGION_LENGTH__>
     804:	00 c0       	rjmp	.+0      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     806:	00 00       	nop
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     810:	8f e9       	ldi	r24, 0x9F	; 159
     812:	9f e0       	ldi	r25, 0x0F	; 15
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     818:	00 c0       	rjmp	.+0      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     81a:	00 00       	nop
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <WriteData>:
     820:	cf 93       	push	r28
     822:	c8 2f       	mov	r28, r24
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	83 e0       	ldi	r24, 0x03	; 3
     828:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     82c:	6c 2f       	mov	r22, r28
     82e:	66 1f       	adc	r22, r22
     830:	66 27       	eor	r22, r22
     832:	66 1f       	adc	r22, r22
     834:	8c e0       	ldi	r24, 0x0C	; 12
     836:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     83a:	c6 fb       	bst	r28, 6
     83c:	66 27       	eor	r22, r22
     83e:	60 f9       	bld	r22, 0
     840:	8a e0       	ldi	r24, 0x0A	; 10
     842:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     846:	c5 fb       	bst	r28, 5
     848:	66 27       	eor	r22, r22
     84a:	60 f9       	bld	r22, 0
     84c:	89 e0       	ldi	r24, 0x09	; 9
     84e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     852:	c4 fb       	bst	r28, 4
     854:	66 27       	eor	r22, r22
     856:	60 f9       	bld	r22, 0
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     866:	8f e9       	ldi	r24, 0x9F	; 159
     868:	9f e0       	ldi	r25, 0x0F	; 15
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
     870:	00 00       	nop
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     87a:	8f e9       	ldi	r24, 0x9F	; 159
     87c:	9f e0       	ldi	r25, 0x0F	; 15
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <__stack+0x1f>
     882:	00 c0       	rjmp	.+0      	; 0x884 <__stack+0x25>
     884:	00 00       	nop
     886:	c3 fb       	bst	r28, 3
     888:	66 27       	eor	r22, r22
     88a:	60 f9       	bld	r22, 0
     88c:	8c e0       	ldi	r24, 0x0C	; 12
     88e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     892:	c2 fb       	bst	r28, 2
     894:	66 27       	eor	r22, r22
     896:	60 f9       	bld	r22, 0
     898:	8a e0       	ldi	r24, 0x0A	; 10
     89a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     89e:	c1 fb       	bst	r28, 1
     8a0:	66 27       	eor	r22, r22
     8a2:	60 f9       	bld	r22, 0
     8a4:	89 e0       	ldi	r24, 0x09	; 9
     8a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     8aa:	6c 2f       	mov	r22, r28
     8ac:	61 70       	andi	r22, 0x01	; 1
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     8bc:	8f e9       	ldi	r24, 0x9F	; 159
     8be:	9f e0       	ldi	r25, 0x0F	; 15
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <__stack+0x61>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <__stack+0x67>
     8c6:	00 00       	nop
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_WritePin>
     8d0:	8f e9       	ldi	r24, 0x9F	; 159
     8d2:	9f e0       	ldi	r25, 0x0F	; 15
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <__stack+0x75>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <__stack+0x7b>
     8da:	00 00       	nop
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <LCD_Init>:
     8e0:	2f e7       	ldi	r18, 0x7F	; 127
     8e2:	85 eb       	ldi	r24, 0xB5	; 181
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	21 50       	subi	r18, 0x01	; 1
     8e8:	80 40       	sbci	r24, 0x00	; 0
     8ea:	90 40       	sbci	r25, 0x00	; 0
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <LCD_Init+0x6>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <LCD_Init+0x10>
     8f0:	00 00       	nop
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     8f8:	88 e2       	ldi	r24, 0x28	; 40
     8fa:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     8fe:	8c e0       	ldi	r24, 0x0C	; 12
     900:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     90a:	8f e9       	ldi	r24, 0x9F	; 159
     90c:	9f e0       	ldi	r25, 0x0F	; 15
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <LCD_Init+0x2e>
     912:	00 c0       	rjmp	.+0      	; 0x914 <LCD_Init+0x34>
     914:	00 00       	nop
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     91c:	08 95       	ret

0000091e <LCD_GoTo>:
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	29 f4       	brne	.+10     	; 0x92c <LCD_GoTo+0xe>
     922:	80 e8       	ldi	r24, 0x80	; 128
     924:	86 0f       	add	r24, r22
     926:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     92a:	08 95       	ret
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	29 f4       	brne	.+10     	; 0x93a <LCD_GoTo+0x1c>
     930:	80 ec       	ldi	r24, 0xC0	; 192
     932:	86 0f       	add	r24, r22
     934:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     938:	08 95       	ret
     93a:	83 30       	cpi	r24, 0x03	; 3
     93c:	29 f4       	brne	.+10     	; 0x948 <LCD_GoTo+0x2a>
     93e:	84 e9       	ldi	r24, 0x94	; 148
     940:	86 0f       	add	r24, r22
     942:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     946:	08 95       	ret
     948:	84 30       	cpi	r24, 0x04	; 4
     94a:	21 f4       	brne	.+8      	; 0x954 <LCD_GoTo+0x36>
     94c:	84 ed       	ldi	r24, 0xD4	; 212
     94e:	86 0f       	add	r24, r22
     950:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     954:	08 95       	ret

00000956 <LCD_WriteChar>:
     956:	0e 94 10 04 	call	0x820	; 0x820 <WriteData>
     95a:	08 95       	ret

0000095c <LCD_WriteString>:
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	8c 01       	movw	r16, r24
     964:	c0 e0       	ldi	r28, 0x00	; 0
     966:	03 c0       	rjmp	.+6      	; 0x96e <LCD_WriteString+0x12>
     968:	0e 94 10 04 	call	0x820	; 0x820 <WriteData>
     96c:	cf 5f       	subi	r28, 0xFF	; 255
     96e:	f8 01       	movw	r30, r16
     970:	ec 0f       	add	r30, r28
     972:	f1 1d       	adc	r31, r1
     974:	80 81       	ld	r24, Z
     976:	81 11       	cpse	r24, r1
     978:	f7 cf       	rjmp	.-18     	; 0x968 <LCD_WriteString+0xc>
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <LCD_WriteHex>:
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	60 97       	sbiw	r28, 0x10	; 16
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	18 2f       	mov	r17, r24
     99a:	80 e1       	ldi	r24, 0x10	; 16
     99c:	e0 e6       	ldi	r30, 0x60	; 96
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	de 01       	movw	r26, r28
     9a2:	11 96       	adiw	r26, 0x01	; 1
     9a4:	01 90       	ld	r0, Z+
     9a6:	0d 92       	st	X+, r0
     9a8:	8a 95       	dec	r24
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <LCD_WriteHex+0x22>
     9ac:	81 2f       	mov	r24, r17
     9ae:	82 95       	swap	r24
     9b0:	8f 70       	andi	r24, 0x0F	; 15
     9b2:	e1 e0       	ldi	r30, 0x01	; 1
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	ec 0f       	add	r30, r28
     9b8:	fd 1f       	adc	r31, r29
     9ba:	e8 0f       	add	r30, r24
     9bc:	f1 1d       	adc	r31, r1
     9be:	80 81       	ld	r24, Z
     9c0:	0e 94 ab 04 	call	0x956	; 0x956 <LCD_WriteChar>
     9c4:	1f 70       	andi	r17, 0x0F	; 15
     9c6:	e1 e0       	ldi	r30, 0x01	; 1
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	ec 0f       	add	r30, r28
     9cc:	fd 1f       	adc	r31, r29
     9ce:	e1 0f       	add	r30, r17
     9d0:	f1 1d       	adc	r31, r1
     9d2:	80 81       	ld	r24, Z
     9d4:	0e 94 ab 04 	call	0x956	; 0x956 <LCD_WriteChar>
     9d8:	60 96       	adiw	r28, 0x10	; 16
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	08 95       	ret

000009ec <LCD_Clear>:

void LCD_Clear()
{
	WriteIns(0x01);
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     9f2:	8f e3       	ldi	r24, 0x3F	; 63
     9f4:	9f e1       	ldi	r25, 0x1F	; 31
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <LCD_Clear+0xa>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <LCD_Clear+0x10>
     9fc:	00 00       	nop
	_delay_ms(2);
	WriteIns(0x80);
     9fe:	80 e8       	ldi	r24, 0x80	; 128
     a00:	0e 94 b0 03 	call	0x760	; 0x760 <WriteIns>
     a04:	08 95       	ret

00000a06 <main>:


int main(void)
{
	
	SecDia_Init();
     a06:	0e 94 49 00 	call	0x92	; 0x92 <SecDia_Init>
	while (1)
	{
		SecDia_Runnable();
     a0a:	0e 94 34 02 	call	0x468	; 0x468 <SecDia_Runnable>
     a0e:	fd cf       	rjmp	.-6      	; 0xa0a <main+0x4>

00000a10 <__vector_16>:
{
	ADC_voidStartConversion(ch);
}

ISR(ADC_vect)
{
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	11 24       	eor	r1, r1
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	4f 93       	push	r20
     a20:	5f 93       	push	r21
     a22:	6f 93       	push	r22
     a24:	7f 93       	push	r23
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	af 93       	push	r26
     a2c:	bf 93       	push	r27
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
	if (Adc_Fptr!=NULL_PTR)
     a32:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <Adc_Fptr>
     a36:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <Adc_Fptr+0x1>
     a3a:	30 97       	sbiw	r30, 0x00	; 0
     a3c:	09 f0       	breq	.+2      	; 0xa40 <__vector_16+0x30>
	{
		Adc_Fptr();
     a3e:	09 95       	icall
	}
	
}
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	7f 91       	pop	r23
     a4e:	6f 91       	pop	r22
     a50:	5f 91       	pop	r21
     a52:	4f 91       	pop	r20
     a54:	3f 91       	pop	r19
     a56:	2f 91       	pop	r18
     a58:	0f 90       	pop	r0
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	0f 90       	pop	r0
     a5e:	1f 90       	pop	r1
     a60:	18 95       	reti

00000a62 <DIO_InitPin>:
		volt=READ_BIT(PIND,pin_num);
		break;
		
	}
	return volt;
}
     a62:	98 2f       	mov	r25, r24
     a64:	97 70       	andi	r25, 0x07	; 7
     a66:	86 95       	lsr	r24
     a68:	86 95       	lsr	r24
     a6a:	86 95       	lsr	r24
     a6c:	61 30       	cpi	r22, 0x01	; 1
     a6e:	09 f4       	brne	.+2      	; 0xa72 <DIO_InitPin+0x10>
     a70:	55 c0       	rjmp	.+170    	; 0xb1c <DIO_InitPin+0xba>
     a72:	20 f0       	brcs	.+8      	; 0xa7c <DIO_InitPin+0x1a>
     a74:	62 30       	cpi	r22, 0x02	; 2
     a76:	09 f4       	brne	.+2      	; 0xa7a <DIO_InitPin+0x18>
     a78:	a1 c0       	rjmp	.+322    	; 0xbbc <DIO_InitPin+0x15a>
     a7a:	08 95       	ret
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	c1 f0       	breq	.+48     	; 0xab0 <DIO_InitPin+0x4e>
     a80:	28 f0       	brcs	.+10     	; 0xa8c <DIO_InitPin+0x2a>
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	39 f1       	breq	.+78     	; 0xad4 <DIO_InitPin+0x72>
     a86:	83 30       	cpi	r24, 0x03	; 3
     a88:	b9 f1       	breq	.+110    	; 0xaf8 <DIO_InitPin+0x96>
     a8a:	08 95       	ret
     a8c:	4a b3       	in	r20, 0x1a	; 26
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	b9 01       	movw	r22, r18
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_InitPin+0x38>
     a96:	66 0f       	add	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	9a 95       	dec	r25
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_InitPin+0x34>
     a9e:	cb 01       	movw	r24, r22
     aa0:	94 2f       	mov	r25, r20
     aa2:	98 2b       	or	r25, r24
     aa4:	9a bb       	out	0x1a, r25	; 26
     aa6:	9b b3       	in	r25, 0x1b	; 27
     aa8:	80 95       	com	r24
     aaa:	89 23       	and	r24, r25
     aac:	8b bb       	out	0x1b, r24	; 27
     aae:	08 95       	ret
     ab0:	47 b3       	in	r20, 0x17	; 23
     ab2:	21 e0       	ldi	r18, 0x01	; 1
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	b9 01       	movw	r22, r18
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <DIO_InitPin+0x5c>
     aba:	66 0f       	add	r22, r22
     abc:	77 1f       	adc	r23, r23
     abe:	9a 95       	dec	r25
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <DIO_InitPin+0x58>
     ac2:	cb 01       	movw	r24, r22
     ac4:	94 2f       	mov	r25, r20
     ac6:	98 2b       	or	r25, r24
     ac8:	97 bb       	out	0x17, r25	; 23
     aca:	98 b3       	in	r25, 0x18	; 24
     acc:	80 95       	com	r24
     ace:	89 23       	and	r24, r25
     ad0:	88 bb       	out	0x18, r24	; 24
     ad2:	08 95       	ret
     ad4:	44 b3       	in	r20, 0x14	; 20
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	b9 01       	movw	r22, r18
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <DIO_InitPin+0x80>
     ade:	66 0f       	add	r22, r22
     ae0:	77 1f       	adc	r23, r23
     ae2:	9a 95       	dec	r25
     ae4:	e2 f7       	brpl	.-8      	; 0xade <DIO_InitPin+0x7c>
     ae6:	cb 01       	movw	r24, r22
     ae8:	94 2f       	mov	r25, r20
     aea:	98 2b       	or	r25, r24
     aec:	94 bb       	out	0x14, r25	; 20
     aee:	95 b3       	in	r25, 0x15	; 21
     af0:	80 95       	com	r24
     af2:	89 23       	and	r24, r25
     af4:	85 bb       	out	0x15, r24	; 21
     af6:	08 95       	ret
     af8:	41 b3       	in	r20, 0x11	; 17
     afa:	21 e0       	ldi	r18, 0x01	; 1
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	b9 01       	movw	r22, r18
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <DIO_InitPin+0xa4>
     b02:	66 0f       	add	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	9a 95       	dec	r25
     b08:	e2 f7       	brpl	.-8      	; 0xb02 <DIO_InitPin+0xa0>
     b0a:	cb 01       	movw	r24, r22
     b0c:	94 2f       	mov	r25, r20
     b0e:	98 2b       	or	r25, r24
     b10:	91 bb       	out	0x11, r25	; 17
     b12:	92 b3       	in	r25, 0x12	; 18
     b14:	80 95       	com	r24
     b16:	89 23       	and	r24, r25
     b18:	82 bb       	out	0x12, r24	; 18
     b1a:	08 95       	ret
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	c1 f0       	breq	.+48     	; 0xb50 <DIO_InitPin+0xee>
     b20:	28 f0       	brcs	.+10     	; 0xb2c <DIO_InitPin+0xca>
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	39 f1       	breq	.+78     	; 0xb74 <DIO_InitPin+0x112>
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	b9 f1       	breq	.+110    	; 0xb98 <DIO_InitPin+0x136>
     b2a:	08 95       	ret
     b2c:	4a b3       	in	r20, 0x1a	; 26
     b2e:	21 e0       	ldi	r18, 0x01	; 1
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	b9 01       	movw	r22, r18
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <DIO_InitPin+0xd8>
     b36:	66 0f       	add	r22, r22
     b38:	77 1f       	adc	r23, r23
     b3a:	9a 95       	dec	r25
     b3c:	e2 f7       	brpl	.-8      	; 0xb36 <DIO_InitPin+0xd4>
     b3e:	cb 01       	movw	r24, r22
     b40:	80 95       	com	r24
     b42:	94 2f       	mov	r25, r20
     b44:	98 23       	and	r25, r24
     b46:	9a bb       	out	0x1a, r25	; 26
     b48:	9b b3       	in	r25, 0x1b	; 27
     b4a:	89 23       	and	r24, r25
     b4c:	8b bb       	out	0x1b, r24	; 27
     b4e:	08 95       	ret
     b50:	47 b3       	in	r20, 0x17	; 23
     b52:	21 e0       	ldi	r18, 0x01	; 1
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	b9 01       	movw	r22, r18
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <DIO_InitPin+0xfc>
     b5a:	66 0f       	add	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	9a 95       	dec	r25
     b60:	e2 f7       	brpl	.-8      	; 0xb5a <DIO_InitPin+0xf8>
     b62:	cb 01       	movw	r24, r22
     b64:	80 95       	com	r24
     b66:	94 2f       	mov	r25, r20
     b68:	98 23       	and	r25, r24
     b6a:	97 bb       	out	0x17, r25	; 23
     b6c:	98 b3       	in	r25, 0x18	; 24
     b6e:	89 23       	and	r24, r25
     b70:	88 bb       	out	0x18, r24	; 24
     b72:	08 95       	ret
     b74:	44 b3       	in	r20, 0x14	; 20
     b76:	21 e0       	ldi	r18, 0x01	; 1
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	b9 01       	movw	r22, r18
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <DIO_InitPin+0x120>
     b7e:	66 0f       	add	r22, r22
     b80:	77 1f       	adc	r23, r23
     b82:	9a 95       	dec	r25
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <DIO_InitPin+0x11c>
     b86:	cb 01       	movw	r24, r22
     b88:	80 95       	com	r24
     b8a:	94 2f       	mov	r25, r20
     b8c:	98 23       	and	r25, r24
     b8e:	94 bb       	out	0x14, r25	; 20
     b90:	95 b3       	in	r25, 0x15	; 21
     b92:	89 23       	and	r24, r25
     b94:	85 bb       	out	0x15, r24	; 21
     b96:	08 95       	ret
     b98:	41 b3       	in	r20, 0x11	; 17
     b9a:	21 e0       	ldi	r18, 0x01	; 1
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	b9 01       	movw	r22, r18
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <DIO_InitPin+0x144>
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	9a 95       	dec	r25
     ba8:	e2 f7       	brpl	.-8      	; 0xba2 <DIO_InitPin+0x140>
     baa:	cb 01       	movw	r24, r22
     bac:	80 95       	com	r24
     bae:	94 2f       	mov	r25, r20
     bb0:	98 23       	and	r25, r24
     bb2:	91 bb       	out	0x11, r25	; 17
     bb4:	92 b3       	in	r25, 0x12	; 18
     bb6:	89 23       	and	r24, r25
     bb8:	82 bb       	out	0x12, r24	; 18
     bba:	08 95       	ret
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	c1 f0       	breq	.+48     	; 0xbf0 <DIO_InitPin+0x18e>
     bc0:	28 f0       	brcs	.+10     	; 0xbcc <DIO_InitPin+0x16a>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	39 f1       	breq	.+78     	; 0xc14 <DIO_InitPin+0x1b2>
     bc6:	83 30       	cpi	r24, 0x03	; 3
     bc8:	b9 f1       	breq	.+110    	; 0xc38 <DIO_InitPin+0x1d6>
     bca:	08 95       	ret
     bcc:	4a b3       	in	r20, 0x1a	; 26
     bce:	21 e0       	ldi	r18, 0x01	; 1
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	b9 01       	movw	r22, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_InitPin+0x178>
     bd6:	66 0f       	add	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	9a 95       	dec	r25
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_InitPin+0x174>
     bde:	cb 01       	movw	r24, r22
     be0:	96 2f       	mov	r25, r22
     be2:	90 95       	com	r25
     be4:	94 23       	and	r25, r20
     be6:	9a bb       	out	0x1a, r25	; 26
     be8:	9b b3       	in	r25, 0x1b	; 27
     bea:	89 2b       	or	r24, r25
     bec:	8b bb       	out	0x1b, r24	; 27
     bee:	08 95       	ret
     bf0:	47 b3       	in	r20, 0x17	; 23
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	b9 01       	movw	r22, r18
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <DIO_InitPin+0x19c>
     bfa:	66 0f       	add	r22, r22
     bfc:	77 1f       	adc	r23, r23
     bfe:	9a 95       	dec	r25
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <DIO_InitPin+0x198>
     c02:	cb 01       	movw	r24, r22
     c04:	96 2f       	mov	r25, r22
     c06:	90 95       	com	r25
     c08:	94 23       	and	r25, r20
     c0a:	97 bb       	out	0x17, r25	; 23
     c0c:	98 b3       	in	r25, 0x18	; 24
     c0e:	89 2b       	or	r24, r25
     c10:	88 bb       	out	0x18, r24	; 24
     c12:	08 95       	ret
     c14:	44 b3       	in	r20, 0x14	; 20
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	b9 01       	movw	r22, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_InitPin+0x1c0>
     c1e:	66 0f       	add	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	9a 95       	dec	r25
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_InitPin+0x1bc>
     c26:	cb 01       	movw	r24, r22
     c28:	96 2f       	mov	r25, r22
     c2a:	90 95       	com	r25
     c2c:	94 23       	and	r25, r20
     c2e:	94 bb       	out	0x14, r25	; 20
     c30:	95 b3       	in	r25, 0x15	; 21
     c32:	89 2b       	or	r24, r25
     c34:	85 bb       	out	0x15, r24	; 21
     c36:	08 95       	ret
     c38:	41 b3       	in	r20, 0x11	; 17
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	b9 01       	movw	r22, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_InitPin+0x1e4>
     c42:	66 0f       	add	r22, r22
     c44:	77 1f       	adc	r23, r23
     c46:	9a 95       	dec	r25
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_InitPin+0x1e0>
     c4a:	cb 01       	movw	r24, r22
     c4c:	96 2f       	mov	r25, r22
     c4e:	90 95       	com	r25
     c50:	94 23       	and	r25, r20
     c52:	91 bb       	out	0x11, r25	; 17
     c54:	92 b3       	in	r25, 0x12	; 18
     c56:	89 2b       	or	r24, r25
     c58:	82 bb       	out	0x12, r24	; 18
     c5a:	08 95       	ret

00000c5c <DIO_Init>:
     c5c:	cf 93       	push	r28
     c5e:	c0 e0       	ldi	r28, 0x00	; 0
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <DIO_Init+0x18>
     c62:	ec 2f       	mov	r30, r28
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	e6 51       	subi	r30, 0x16	; 22
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	60 81       	ld	r22, Z
     c6c:	8c 2f       	mov	r24, r28
     c6e:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_InitPin>
     c72:	cf 5f       	subi	r28, 0xFF	; 255
     c74:	c0 32       	cpi	r28, 0x20	; 32
     c76:	a8 f3       	brcs	.-22     	; 0xc62 <DIO_Init+0x6>
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <DIO_WritePin>:
void DIO_WritePin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
	u8 pin_num =pin%8;
     c7c:	98 2f       	mov	r25, r24
     c7e:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port =pin/8;
     c80:	86 95       	lsr	r24
     c82:	86 95       	lsr	r24
     c84:	86 95       	lsr	r24
	if (volt==HIGH)
     c86:	61 30       	cpi	r22, 0x01	; 1
     c88:	e1 f5       	brne	.+120    	; 0xd02 <DIO_WritePin+0x86>
	{
		switch(port)
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	99 f0       	breq	.+38     	; 0xcb4 <DIO_WritePin+0x38>
     c8e:	28 f0       	brcs	.+10     	; 0xc9a <DIO_WritePin+0x1e>
     c90:	82 30       	cpi	r24, 0x02	; 2
     c92:	e9 f0       	breq	.+58     	; 0xcce <DIO_WritePin+0x52>
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	41 f1       	breq	.+80     	; 0xce8 <DIO_WritePin+0x6c>
     c98:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
     c9a:	4b b3       	in	r20, 0x1b	; 27
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	b9 01       	movw	r22, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_WritePin+0x2c>
     ca4:	66 0f       	add	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	9a 95       	dec	r25
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_WritePin+0x28>
     cac:	cb 01       	movw	r24, r22
     cae:	84 2b       	or	r24, r20
     cb0:	8b bb       	out	0x1b, r24	; 27
			break;
     cb2:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
     cb4:	48 b3       	in	r20, 0x18	; 24
     cb6:	21 e0       	ldi	r18, 0x01	; 1
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	b9 01       	movw	r22, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_WritePin+0x46>
     cbe:	66 0f       	add	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	9a 95       	dec	r25
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_WritePin+0x42>
     cc6:	cb 01       	movw	r24, r22
     cc8:	84 2b       	or	r24, r20
     cca:	88 bb       	out	0x18, r24	; 24
			break;
     ccc:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
     cce:	45 b3       	in	r20, 0x15	; 21
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	b9 01       	movw	r22, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_WritePin+0x60>
     cd8:	66 0f       	add	r22, r22
     cda:	77 1f       	adc	r23, r23
     cdc:	9a 95       	dec	r25
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_WritePin+0x5c>
     ce0:	cb 01       	movw	r24, r22
     ce2:	84 2b       	or	r24, r20
     ce4:	85 bb       	out	0x15, r24	; 21
			break;
     ce6:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
     ce8:	42 b3       	in	r20, 0x12	; 18
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	b9 01       	movw	r22, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <DIO_WritePin+0x7a>
     cf2:	66 0f       	add	r22, r22
     cf4:	77 1f       	adc	r23, r23
     cf6:	9a 95       	dec	r25
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <DIO_WritePin+0x76>
     cfa:	cb 01       	movw	r24, r22
     cfc:	84 2b       	or	r24, r20
     cfe:	82 bb       	out	0x12, r24	; 18
			break;
     d00:	08 95       	ret
			
		}
	}
	else
	{
		switch(port)
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	a1 f0       	breq	.+40     	; 0xd2e <DIO_WritePin+0xb2>
     d06:	28 f0       	brcs	.+10     	; 0xd12 <DIO_WritePin+0x96>
     d08:	82 30       	cpi	r24, 0x02	; 2
     d0a:	f9 f0       	breq	.+62     	; 0xd4a <DIO_WritePin+0xce>
     d0c:	83 30       	cpi	r24, 0x03	; 3
     d0e:	59 f1       	breq	.+86     	; 0xd66 <DIO_WritePin+0xea>
     d10:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
     d12:	4b b3       	in	r20, 0x1b	; 27
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	b9 01       	movw	r22, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_WritePin+0xa4>
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	9a 95       	dec	r25
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_WritePin+0xa0>
     d24:	cb 01       	movw	r24, r22
     d26:	80 95       	com	r24
     d28:	84 23       	and	r24, r20
     d2a:	8b bb       	out	0x1b, r24	; 27
			break;
     d2c:	08 95       	ret
			case PB:
			CLR_BIT(PORTB,pin_num);
     d2e:	48 b3       	in	r20, 0x18	; 24
     d30:	21 e0       	ldi	r18, 0x01	; 1
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	b9 01       	movw	r22, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_WritePin+0xc0>
     d38:	66 0f       	add	r22, r22
     d3a:	77 1f       	adc	r23, r23
     d3c:	9a 95       	dec	r25
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_WritePin+0xbc>
     d40:	cb 01       	movw	r24, r22
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	88 bb       	out	0x18, r24	; 24
			break;
     d48:	08 95       	ret
			case PC:
			CLR_BIT(PORTC,pin_num);
     d4a:	45 b3       	in	r20, 0x15	; 21
     d4c:	21 e0       	ldi	r18, 0x01	; 1
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	b9 01       	movw	r22, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_WritePin+0xdc>
     d54:	66 0f       	add	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	9a 95       	dec	r25
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_WritePin+0xd8>
     d5c:	cb 01       	movw	r24, r22
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	85 bb       	out	0x15, r24	; 21
			break;
     d64:	08 95       	ret
			case PD:
			CLR_BIT(PORTD,pin_num);
     d66:	42 b3       	in	r20, 0x12	; 18
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	b9 01       	movw	r22, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_WritePin+0xf8>
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	9a 95       	dec	r25
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_WritePin+0xf4>
     d78:	cb 01       	movw	r24, r22
     d7a:	80 95       	com	r24
     d7c:	84 23       	and	r24, r20
     d7e:	82 bb       	out	0x12, r24	; 18
     d80:	08 95       	ret

00000d82 <__vector_1>:


/*******************************ISR********************************/

ISR(INT0_vect)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
	if (INT0_Fptr!=NULL_PTR)
     da4:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <INT0_Fptr>
     da8:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <INT0_Fptr+0x1>
     dac:	30 97       	sbiw	r30, 0x00	; 0
     dae:	09 f0       	breq	.+2      	; 0xdb2 <__vector_1+0x30>
	{
		INT0_Fptr();
     db0:	09 95       	icall
	}
	
}
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <__vector_2>:
ISR(INT1_vect)
{
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
	
	
	if (INT1_Fptr!=NULL_PTR)
     df6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <INT1_Fptr>
     dfa:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <INT1_Fptr+0x1>
     dfe:	30 97       	sbiw	r30, 0x00	; 0
     e00:	09 f0       	breq	.+2      	; 0xe04 <__vector_2+0x30>
	{
		INT1_Fptr();
     e02:	09 95       	icall
	}
}
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti

00000e26 <__vector_3>:
ISR(INT2_vect)
{
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
	if (INT2_Fptr!=NULL_PTR)
     e48:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <INT2_Fptr>
     e4c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <INT2_Fptr+0x1>
     e50:	30 97       	sbiw	r30, 0x00	; 0
     e52:	09 f0       	breq	.+2      	; 0xe56 <__vector_3+0x30>
	{
		INT2_Fptr();
     e54:	09 95       	icall
	}
	
     e56:	ff 91       	pop	r31
     e58:	ef 91       	pop	r30
     e5a:	bf 91       	pop	r27
     e5c:	af 91       	pop	r26
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	7f 91       	pop	r23
     e64:	6f 91       	pop	r22
     e66:	5f 91       	pop	r21
     e68:	4f 91       	pop	r20
     e6a:	3f 91       	pop	r19
     e6c:	2f 91       	pop	r18
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_12>:
{
	CLR_BIT(SPCR,SPIE);
}

ISR(SPI_STC_vect)
{
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	2f 93       	push	r18
     e84:	3f 93       	push	r19
     e86:	4f 93       	push	r20
     e88:	5f 93       	push	r21
     e8a:	6f 93       	push	r22
     e8c:	7f 93       	push	r23
     e8e:	8f 93       	push	r24
     e90:	9f 93       	push	r25
     e92:	af 93       	push	r26
     e94:	bf 93       	push	r27
     e96:	ef 93       	push	r30
     e98:	ff 93       	push	r31
	if (SPI_Fptr!=NULL_PTR)
     e9a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <SPI_Fptr>
     e9e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <SPI_Fptr+0x1>
     ea2:	30 97       	sbiw	r30, 0x00	; 0
     ea4:	09 f0       	breq	.+2      	; 0xea8 <__vector_12+0x30>
	{
		SPI_Fptr();
     ea6:	09 95       	icall
		
	}
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <TIMER0_Init>:
{
	Timer0_OVF_Fptr=local_fptr;
}
void TIMER0_OC_SetCallBack(void(*local_fptr)(void))
{
	Timer0_OC_Fptr=local_fptr;
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	69 f0       	breq	.+26     	; 0xee8 <TIMER0_Init+0x1e>
     ece:	28 f0       	brcs	.+10     	; 0xeda <TIMER0_Init+0x10>
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	89 f0       	breq	.+34     	; 0xef6 <TIMER0_Init+0x2c>
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	b1 f0       	breq	.+44     	; 0xf04 <TIMER0_Init+0x3a>
     ed8:	08 95       	ret
     eda:	83 b7       	in	r24, 0x33	; 51
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	83 bf       	out	0x33, r24	; 51
     ee0:	83 b7       	in	r24, 0x33	; 51
     ee2:	87 7f       	andi	r24, 0xF7	; 247
     ee4:	83 bf       	out	0x33, r24	; 51
     ee6:	08 95       	ret
     ee8:	83 b7       	in	r24, 0x33	; 51
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	83 bf       	out	0x33, r24	; 51
     eee:	83 b7       	in	r24, 0x33	; 51
     ef0:	87 7f       	andi	r24, 0xF7	; 247
     ef2:	83 bf       	out	0x33, r24	; 51
     ef4:	08 95       	ret
     ef6:	83 b7       	in	r24, 0x33	; 51
     ef8:	8f 7b       	andi	r24, 0xBF	; 191
     efa:	83 bf       	out	0x33, r24	; 51
     efc:	83 b7       	in	r24, 0x33	; 51
     efe:	88 60       	ori	r24, 0x08	; 8
     f00:	83 bf       	out	0x33, r24	; 51
     f02:	08 95       	ret
     f04:	83 b7       	in	r24, 0x33	; 51
     f06:	80 64       	ori	r24, 0x40	; 64
     f08:	83 bf       	out	0x33, r24	; 51
     f0a:	83 b7       	in	r24, 0x33	; 51
     f0c:	88 60       	ori	r24, 0x08	; 8
     f0e:	83 bf       	out	0x33, r24	; 51
     f10:	08 95       	ret

00000f12 <TIMER0_Start>:
     f12:	93 b7       	in	r25, 0x33	; 51
     f14:	98 7f       	andi	r25, 0xF8	; 248
     f16:	93 bf       	out	0x33, r25	; 51
     f18:	93 b7       	in	r25, 0x33	; 51
     f1a:	89 2b       	or	r24, r25
     f1c:	83 bf       	out	0x33, r24	; 51
     f1e:	08 95       	ret

00000f20 <__vector_11>:
/*************************************************************************/

/*************************TIMER0 ISR*************************************/

ISR(TIMER0_OVF_vect)
{
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	4f 93       	push	r20
     f30:	5f 93       	push	r21
     f32:	6f 93       	push	r22
     f34:	7f 93       	push	r23
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	af 93       	push	r26
     f3c:	bf 93       	push	r27
     f3e:	ef 93       	push	r30
     f40:	ff 93       	push	r31
	if (Timer0_OVF_Fptr!=NULL_PTR)
     f42:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <Timer0_OVF_Fptr>
     f46:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <Timer0_OVF_Fptr+0x1>
     f4a:	30 97       	sbiw	r30, 0x00	; 0
     f4c:	09 f0       	breq	.+2      	; 0xf50 <__vector_11+0x30>
	{
		Timer0_OVF_Fptr();
     f4e:	09 95       	icall
	}
}
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <__vector_10>:

ISR(TIMER0_OC_vect)
{
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	2f 93       	push	r18
     f7e:	3f 93       	push	r19
     f80:	4f 93       	push	r20
     f82:	5f 93       	push	r21
     f84:	6f 93       	push	r22
     f86:	7f 93       	push	r23
     f88:	8f 93       	push	r24
     f8a:	9f 93       	push	r25
     f8c:	af 93       	push	r26
     f8e:	bf 93       	push	r27
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
	if (Timer0_OC_Fptr!=NULL_PTR)
     f94:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <Timer0_OC_Fptr>
     f98:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <Timer0_OC_Fptr+0x1>
     f9c:	30 97       	sbiw	r30, 0x00	; 0
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <__vector_10+0x30>
	{
		Timer0_OC_Fptr();
     fa0:	09 95       	icall
	}
}
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <__vector_9>:
/*********************isrs ********************/



ISR(TIMER1_OVF_vect)
{
     fc4:	1f 92       	push	r1
     fc6:	0f 92       	push	r0
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	0f 92       	push	r0
     fcc:	11 24       	eor	r1, r1
     fce:	2f 93       	push	r18
     fd0:	3f 93       	push	r19
     fd2:	4f 93       	push	r20
     fd4:	5f 93       	push	r21
     fd6:	6f 93       	push	r22
     fd8:	7f 93       	push	r23
     fda:	8f 93       	push	r24
     fdc:	9f 93       	push	r25
     fde:	af 93       	push	r26
     fe0:	bf 93       	push	r27
     fe2:	ef 93       	push	r30
     fe4:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=NULL_PTR)
     fe6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <Timer1_OVF_Fptr>
     fea:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <Timer1_OVF_Fptr+0x1>
     fee:	30 97       	sbiw	r30, 0x00	; 0
     ff0:	09 f0       	breq	.+2      	; 0xff4 <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
     ff2:	09 95       	icall
	}
}
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=NULL_PTR)
    1038:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Timer1_OCA_Fptr>
    103c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Timer1_OCA_Fptr+0x1>
    1040:	30 97       	sbiw	r30, 0x00	; 0
    1042:	09 f0       	breq	.+2      	; 0x1046 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
    1044:	09 95       	icall
	}

	
}
    1046:	ff 91       	pop	r31
    1048:	ef 91       	pop	r30
    104a:	bf 91       	pop	r27
    104c:	af 91       	pop	r26
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	7f 91       	pop	r23
    1054:	6f 91       	pop	r22
    1056:	5f 91       	pop	r21
    1058:	4f 91       	pop	r20
    105a:	3f 91       	pop	r19
    105c:	2f 91       	pop	r18
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    1068:	1f 92       	push	r1
    106a:	0f 92       	push	r0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	0f 92       	push	r0
    1070:	11 24       	eor	r1, r1
    1072:	2f 93       	push	r18
    1074:	3f 93       	push	r19
    1076:	4f 93       	push	r20
    1078:	5f 93       	push	r21
    107a:	6f 93       	push	r22
    107c:	7f 93       	push	r23
    107e:	8f 93       	push	r24
    1080:	9f 93       	push	r25
    1082:	af 93       	push	r26
    1084:	bf 93       	push	r27
    1086:	ef 93       	push	r30
    1088:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=NULL_PTR)
    108a:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <Timer1_OCB_Fptr>
    108e:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <Timer1_OCB_Fptr+0x1>
    1092:	30 97       	sbiw	r30, 0x00	; 0
    1094:	09 f0       	breq	.+2      	; 0x1098 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
    1096:	09 95       	icall
	}
}
    1098:	ff 91       	pop	r31
    109a:	ef 91       	pop	r30
    109c:	bf 91       	pop	r27
    109e:	af 91       	pop	r26
    10a0:	9f 91       	pop	r25
    10a2:	8f 91       	pop	r24
    10a4:	7f 91       	pop	r23
    10a6:	6f 91       	pop	r22
    10a8:	5f 91       	pop	r21
    10aa:	4f 91       	pop	r20
    10ac:	3f 91       	pop	r19
    10ae:	2f 91       	pop	r18
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti

000010ba <__vector_6>:
ISR(TIMER1_ICU_vect)
{
    10ba:	1f 92       	push	r1
    10bc:	0f 92       	push	r0
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	0f 92       	push	r0
    10c2:	11 24       	eor	r1, r1
    10c4:	2f 93       	push	r18
    10c6:	3f 93       	push	r19
    10c8:	4f 93       	push	r20
    10ca:	5f 93       	push	r21
    10cc:	6f 93       	push	r22
    10ce:	7f 93       	push	r23
    10d0:	8f 93       	push	r24
    10d2:	9f 93       	push	r25
    10d4:	af 93       	push	r26
    10d6:	bf 93       	push	r27
    10d8:	ef 93       	push	r30
    10da:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULL_PTR)
    10dc:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <Timer1_ICU_Fptr>
    10e0:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <Timer1_ICU_Fptr+0x1>
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	09 f0       	breq	.+2      	; 0x10ea <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
    10e8:	09 95       	icall
	}
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <UART_Init>:
	UART_RX_Fptr = LocalFptr;
}

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
	UART_TX_Fptr = LocalFptr;
    110c:	87 e6       	ldi	r24, 0x67	; 103
    110e:	89 b9       	out	0x09, r24	; 9
    1110:	8b b1       	in	r24, 0x0b	; 11
    1112:	8d 7f       	andi	r24, 0xFD	; 253
    1114:	8b b9       	out	0x0b, r24	; 11
    1116:	8a b1       	in	r24, 0x0a	; 10
    1118:	80 61       	ori	r24, 0x10	; 16
    111a:	8a b9       	out	0x0a, r24	; 10
    111c:	8a b1       	in	r24, 0x0a	; 10
    111e:	88 60       	ori	r24, 0x08	; 8
    1120:	8a b9       	out	0x0a, r24	; 10
    1122:	08 95       	ret

00001124 <UART_Receive>:
    1124:	5f 9b       	sbis	0x0b, 7	; 11
    1126:	fe cf       	rjmp	.-4      	; 0x1124 <UART_Receive>
    1128:	8c b1       	in	r24, 0x0c	; 12
    112a:	08 95       	ret

0000112c <__vector_13>:
}


ISR(UART_RX_vect)
{
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULL_PTR)
    114e:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <UART_RX_Fptr>
    1152:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <UART_RX_Fptr+0x1>
    1156:	30 97       	sbiw	r30, 0x00	; 0
    1158:	09 f0       	breq	.+2      	; 0x115c <__vector_13+0x30>
	{
		UART_RX_Fptr();
    115a:	09 95       	icall
	}
}
    115c:	ff 91       	pop	r31
    115e:	ef 91       	pop	r30
    1160:	bf 91       	pop	r27
    1162:	af 91       	pop	r26
    1164:	9f 91       	pop	r25
    1166:	8f 91       	pop	r24
    1168:	7f 91       	pop	r23
    116a:	6f 91       	pop	r22
    116c:	5f 91       	pop	r21
    116e:	4f 91       	pop	r20
    1170:	3f 91       	pop	r19
    1172:	2f 91       	pop	r18
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	0f 90       	pop	r0
    117a:	1f 90       	pop	r1
    117c:	18 95       	reti

0000117e <__vector_15>:

ISR(UART_TX_vect)
{
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULL_PTR)
    11a0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <UART_TX_Fptr>
    11a4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <UART_TX_Fptr+0x1>
    11a8:	30 97       	sbiw	r30, 0x00	; 0
    11aa:	09 f0       	breq	.+2      	; 0x11ae <__vector_15+0x30>
	{
		UART_TX_Fptr();
    11ac:	09 95       	icall
	}
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	bf 91       	pop	r27
    11b4:	af 91       	pop	r26
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <_exit>:
    11d0:	f8 94       	cli

000011d2 <__stop_program>:
    11d2:	ff cf       	rjmp	.-2      	; 0x11d2 <__stop_program>
